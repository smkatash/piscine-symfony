{% extends 'base.html.twig' %}

{% block title %}Post Form with WebSockets{% endblock %}

{% block content %}
<div id="post-details-container" style="display: none; margin-bottom: 20px; border: 1px solid #ccc; padding: 10px;">
    <!-- Post details will be dynamically loaded here -->
</div>
<div id="login-form-container">
    {% if not is_logged_in %}
        <h2>Login</h2>
        <form id="loginForm">
            <label for="username">Username:</label>
            <input type="text" id="username" name="_username" placeholder="Username" required>
            <label for="password">Password:</label>
            <input type="password" id="password" name="_password" placeholder="Password" required>
            <button type="submit">Login</button>
        </form>
    {% endif %}
</div>

<div id="post-form-container" {% if not is_logged_in %}style="display:none;"{% endif %}>
    <h2>Create a New Post</h2>
    {% if form is not null %}
        {{ form_start(form) }}
        {{ form_widget(form) }}
        <button type="submit" class="btn btn-primary">Submit Post</button>
        {{ form_end(form) }}
    {% endif %}
</div>

<div id="confirmation-message" style="display:none;"></div>

<div id="post-list-container">
    <div style="height: 400px; overflow-y: scroll; margin: 20px auto; max-width: 80%; border: 1px solid #ccc;">
        <table style="width: 100%; table-layout: auto; margin: 0 auto; border-collapse: collapse;">
            <caption style="font-size: 1.5em; margin-bottom: 10px;">All Posts</caption>
            <thead>
                <tr>
                    <th style="padding: 10px; text-align: left;">Title</th>
                    <th style="padding: 10px; text-align: left;">Created</th>
                </tr>
            </thead>
            <tbody id="post-list">
                {% for post in posts %}
                    <tr id="post-{{ post.id }}" style="border-bottom: 1px solid #ddd;">
                        <td style="padding: 10px; text-align: left;">
                            <a href="#" class="post-title" data-id="{{ post.id }}">
                                {{ post.title }}
                            </a>
                        </td>
                        <td style="padding: 10px; text-align: left;">{{ post.created|date('Y-m-d H:i:s') }}</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

<script>
    const socket = new WebSocket('ws://localhost:8080');

    socket.onmessage = function(event) {
        const message = JSON.parse(event.data);
        if (message.type === 'newPost') {
            addPostToList(message.post);
        } else if (message.type === 'deletePost') {
            removePostFromList(message.postId);
            removePostDetailsFromContainer(message.postId); 
        }
    };

    function addPostToList(post) {
        const postListBody = document.getElementById('post-list');
        const newRow = document.createElement('tr');
        newRow.id = `post-${post.id}`;
        newRow.style.borderBottom = '1px solid #ddd';
        newRow.innerHTML = `
            <td style="padding: 10px; text-align: left;">
                <a href="#" class="post-title" data-id="${post.id}">${post.title}</a>
            </td>
            <td style="padding: 10px; text-align: left;">${post.created}</td>
        `;
        postListBody.appendChild(newRow);
        const postTitles = document.querySelectorAll('.post-title');
        postTitles.forEach((title) => {
            title.addEventListener('click', function (event) {
                event.preventDefault();
                const postId = parseInt(this.dataset.id);
                fetch(`/view/${postId}`)
                    .then((response) => {
                        if (!response.ok) {
                            return response.json().then((errorData) => {
                                throw new Error(errorData.error || 'Unknown error');
                            });
                        }
                        return response.json();
                    })
                    .then((post) => {
                        const postDetailsContainer = document.getElementById('post-details-container');
                            postDetailsContainer.innerHTML = `
                                <h3>Post Details</h3>
                                <p><strong>Title:</strong> ${post.title}</p>
                                <p><strong>Content:</strong> ${post.content}</p>
                                <p><strong>Created:</strong> ${post.created}</p>
                                <button class="btn btn-danger" id="delete-post-btn">Delete Post</button>
                            `;
                            postDetailsContainer.style.display = 'block';
                            postDetailsContainer.dataset.postId = post.id;
                            const deleteBtn = postDetailsContainer.querySelector('#delete-post-btn');
                            deleteBtn.addEventListener('click', () => {
                            if (confirm('Are you sure you want to delete this post?')) {
                                deletePost(postId);
                                postDetailsContainer.style.display = 'none';
                                postDetailsContainer.innerHTML = '';
                                postDetailsContainer.removeAttribute('data-post-id'); 
                            }
                        });
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                        const postDetailsContainer = document.getElementById('post-details-container');
                        postDetailsContainer.innerHTML = `<p class="error">An error occurred: ${error.message}</p>`;
                        postDetailsContainer.style.display = 'block';
                    });
                });
            });
    }

    function removePostFromList(postId) {
        const postRow = document.getElementById(`post-${postId}`);
        if (postRow) {
            postRow.remove();
        }
    }

    function removePostDetailsFromContainer(postId) {
    const postDetailsContainer = document.getElementById('post-details-container');
    if (postDetailsContainer && postDetailsContainer.dataset.postId == postId) {
        console.log(postDetailsContainer.dataset.postId);
        postDetailsContainer.style.display = 'none';
        postDetailsContainer.innerHTML = '';
        postDetailsContainer.removeAttribute('data-post-id');
    }
}

    const loginForm = document.querySelector('#login-form-container form');
        if (loginForm) {
            document.getElementById('loginForm')?.addEventListener('submit', function (e) {
                e.preventDefault();
                const username = document.getElementById('username').value;
                const password = document.getElementById('password').value;
                if (!username || !password) {
                    alert('Username and password are required.');
                    return;
                }

                fetch('/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ _username: username, _password: password }),
                })
                .then((response) => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        return response.json().then((errorData) => {
                            throw new Error(errorData.error || 'Unknown error');
                        });
                    }
                })
                .then((data) => {
                    if (data && data.message) {
                        window.location.href = '/';
                    } else {
                        alert('Unexpected response format');
                    }
                })
                .catch((error) => {
                    console.error('Error:', error);
                    alert('An error occurred: ' + error.message);
                });
            });
    }

    document.querySelector('#post-form-container form')?.addEventListener('submit', function(event) {
        event.preventDefault();
        const formData = new FormData(this);
        fetch('{{ path('post_create') }}', {
            method: 'POST',
            body: formData,
        })
        .then((response) => {
            if (!response.ok) {
                return response.json().then((errorData) => {
                    throw new Error(errorData.error || 'Unknown error');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                socket.send(JSON.stringify({ type: 'newPost', data: { post: data.newPost } }));
            }
        })
        .catch((error) => {
            console.error('Error:', error);
            alert('An error occurred: ' + error.message);
        });
    });

    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.post-title').forEach(title => {
            title.addEventListener('click', function(event) {
                event.preventDefault();
                const postId = this.dataset.id;
                console.log('Delete button clicked');
                fetch(`/view/${postId}`)
                    .then(response => response.json())
                    .then(post => {
                        const postDetailsContainer = document.getElementById('post-details-container');
                        postDetailsContainer.innerHTML = `
                            <h3>Post Details</h3>
                            <p><strong>Title:</strong> ${post.title}</p>
                            <p><strong>Content:</strong> ${post.content}</p>
                            <p><strong>Created:</strong> ${post.created}</p>
                            <button class="btn btn-danger" id="delete-post-btn">Delete Post</button>
                        `;
                        postDetailsContainer.style.display = 'block';
                        const deleteBtn = postDetailsContainer.querySelector('#delete-post-btn');
                        deleteBtn.addEventListener('click', () => {
                        if (confirm('Are you sure you want to delete this post?')) {
                            deletePost(post.id);
                            postDetailsContainer.style.display = 'none';
                            postDetailsContainer.innerHTML = '';
                        }
                    });
                });
            });
        });
    });

    function deletePost(postId) {
        fetch(`/delete/${postId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
        })
        .then((response) => response.json())
        .then((data) => {
            if (data.success) {
                alert(data.message);
                socket.send(JSON.stringify({ type: 'deletePost', data: { postId } }));
                removePostFromList(postId);
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch((error) => {
            console.error('Error:', error);
            alert('An error occurred while deleting the post.');
        });
    }
</script>
{% endblock %}
